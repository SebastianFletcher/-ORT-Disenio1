using BusinessLogic.DTO;
using BusinessLogic.Exceptions;
using Persistence;
using Persistence.Repositories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using UserInterface.DTO;

namespace UserInterface.Controls
{
    public partial class AuthorReportControl : UserControl
    {
        private const string TOTAL_PERCENTAGE = "Percentage of phrases generated by type";
        private const string ENTITY_MENTION_QUANTITY = "Number of entities mentioned.";
        private const string DAILY_AVERAGE = "Average daily phrases";

        private IRepository<Author> repository;
        private IRepository<Phrase> phraseRepository;

        public AuthorReportControl()
        {
            this.repository = new AuthorRepository();
            this.phraseRepository = new PhraseRepository();

            InitializeComponent();

            try
            {
                LoadFilterOptions();
            }
            catch (DatabaseException ex)
            {
                Alerts.CrashApp(ex.Message);
            }
        }

        #region Events

        private void cboFilter_SelectedIndexChanged(object sender, EventArgs e)
        {
            List<Author> authorList = repository.GetAll().ToList();
            List<Phrase> phraseList = phraseRepository.GetAll().ToList();

            int phraseCount = phraseList.Count;

            switch (cboFilter.SelectedItem)
            {
                case TOTAL_PERCENTAGE:

                    var listPercentage = from phrase in phraseList
                                         group phrase by phrase.Author.Id into phraseGroup
                                         select new AuthorListItem
                                         {
                                             LastName = phraseGroup.Select(x => x.Author.LastName).First().ToString(),
                                             Name = phraseGroup.Select(x => x.Author.Name).First().ToString(),
                                             UserName = phraseGroup.Select(x => x.Author.Username).First().ToString(),
                                             Value = (phraseGroup.Count() * 100 / phraseCount).ToString()
                                         };

                    lstAuthor.DataSource = listPercentage.ToList();
                    ChartLoad(listPercentage.Take(10).ToList());
                    break;

                case ENTITY_MENTION_QUANTITY:

                    var listQuantity = from phrase in phraseList
                                       group phrase by phrase.Author.Id into phraseGroup
                                       select new AuthorListItem
                                       {
                                           LastName = phraseGroup.Select(x => x.Author.LastName).First().ToString(),
                                           Name = phraseGroup.Select(x => x.Author.Name).First().ToString(),
                                           UserName = phraseGroup.Select(x => x.Author.Username).First().ToString(),
                                           Value = (phraseGroup.Where(en => en.Entity != null).Select(x => x.Entity.Name).Distinct().Count()).ToString()
                                       };

                    lstAuthor.DataSource = listQuantity.ToList();
                    ChartLoad(listQuantity.Take(10).ToList());
                    break;

                case DAILY_AVERAGE:

                    var listAverage = from phrase in phraseList
                                      group phrase by phrase.Author.Id into phraseGroup
                                      select new
                                      {
                                          Author = phraseGroup.Select(x => x.Author).First(),
                                          PostedDate = phraseGroup.OrderBy(x => x.PostedDate).Select(x => x.PostedDate).First(),
                                          Count = phraseGroup.Count()
                                      };

                    var listAux = new List<AuthorListItem>();
                    foreach (var item in listAverage)
                    {
                        var diffDays = Math.Round((DateTime.Today - item.PostedDate).TotalDays, 0, MidpointRounding.AwayFromZero);
                        var average = diffDays == 0 ? item.Count : item.Count / (int)diffDays;
                        var newItem = new AuthorListItem();
                        newItem.Name = item.Author.Name;
                        newItem.LastName = item.Author.LastName;
                        newItem.UserName = item.Author.Username;
                        newItem.Value = average < 0 ? "0" : average.ToString();
                        listAux.Add(newItem);
                    }

                    lstAuthor.DataSource = listAux.ToList();
                    ChartLoad(listAux.Take(10).ToList());
                    break;

                default:

                    break;
            }
        }

        #endregion

        #region Fields

        private void ChartLoad(List<AuthorListItem> list)
        {
            foreach (var series in chartAuthors.Series)
                series.Points.Clear();

            foreach (AuthorListItem author in list)
                chartAuthors.Series["Authors"].Points.AddXY(author.UserName, author.Value);
        }

        private void LoadFilterOptions()
        {
            List<string> options = new List<string>()
            {
                TOTAL_PERCENTAGE,
                ENTITY_MENTION_QUANTITY,
                DAILY_AVERAGE
            };

            cboFilter.DataSource = options;
            cboFilter.DropDownStyle = ComboBoxStyle.DropDownList;
        }

        #endregion
    }
}
